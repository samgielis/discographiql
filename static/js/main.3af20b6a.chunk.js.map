{"version":3,"sources":["DefaultTheme.tsx","components/SearchBar.tsx","components/ElegantImage.tsx","components/ArtistSearchOverview.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultResponsiveMargin","base","sm","lg","SearchBar","onQueryEntered","FormControl","my","InputGroup","size","Input","type","placeholder","onKeyDown","event","key","currentTarget","value","ElegantImage","src","alt","fallBackSrc","props","useState","isLoaded","setLoaded","Skeleton","AspectRatioBox","backgroundColor","Image","fallbackSrc","objectFit","opacity","transition","onLoad","ARTISTS","gql","ArtistSearchOverview","query","useQuery","variables","partialName","loading","error","data","Spinner","Text","SimpleGrid","columns","spacing","queryArtists","map","id","name","image","Box","textAlign","ratio","maxW","Heading","m","client","ApolloClient","uri","cache","InMemoryCache","App","setQuery","ThemeProvider","CSSReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uSAAaA,EAA0B,CAAEC,KAAM,EAAGC,GAAI,EAAGC,GAAI,GCQtD,SAASC,EAAT,GAAwD,IAAnCC,EAAkC,EAAlCA,eAC1B,OACE,kBAACC,EAAA,EAAD,CAAaC,GAAIP,GACf,kBAACQ,EAAA,EAAD,CAAYC,KAAK,MACf,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,SACZC,UAAW,SAACC,GACQ,UAAdA,EAAMC,KACRV,EAAeS,EAAME,cAAcC,Y,yECHlC,SAASC,EAAT,GAK8B,IAJ3CC,EAI0C,EAJ1CA,IACAC,EAG0C,EAH1CA,IACAC,EAE0C,EAF1CA,YACGC,EACuC,6CACZC,oBAAS,GADG,mBACnCC,EADmC,KACzBC,EADyB,KAE1C,OACE,kBAACC,EAAA,EAAD,CAAUF,SAAUA,GAClB,kBAACG,EAAA,EAAD,iBAAoBL,EAApB,CAA2BM,gBAAgB,aACzC,kBAACC,EAAA,EAAD,CACEV,IAAKA,EACLC,IAAKA,EACLU,YAAaT,EACbU,UAAU,QACVC,QAASR,EAAW,EAAI,EACxBS,WAAW,cACXC,OAAQ,WACNT,GAAU,Q,0MC1BtB,IAAMU,EAAUC,cAAH,KAoBN,SAASC,EAAT,GAAqE,IAArCC,EAAoC,EAApCA,MAAoC,EACxCC,mBAASJ,EAAS,CACjDK,UAAW,CAAEC,YAAaH,KADpBI,EADiE,EACjEA,QAASC,EADwD,EACxDA,MAAOC,EADiD,EACjDA,KAIxB,OAAIF,EACK,kBAACG,EAAA,EAAD,MAGLF,EACK,kBAACG,EAAA,EAAD,sDAIP,kBAACC,EAAA,EAAD,CACEC,QAAS,CAAE/C,KAAM,EAAGC,GAAI,EAAGC,GAAI,GAC/B8C,QAASjD,GAER4C,EAAKM,aAAaC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACrB,kBAACC,EAAA,EAAD,CAAKxC,IAAKqC,EAAII,UAAU,UACtB,kBAACtC,EAAD,CAAcC,IAAKmC,EAAOlC,IAAKiC,EAAMI,MAAO,EAAGC,KAAK,UACpD,kBAACC,EAAA,EAAD,CAASlD,KAAK,KAAKmD,EAAG5D,GACnBqD,QCzCb,IAAMQ,EAAS,IAAIC,eAAa,CAC9BC,IAAK,wDACLC,MAAO,IAAIC,kBAmBEC,MAhBf,WAAgB,IAAD,EACa3C,mBAAS,IADtB,mBACNe,EADM,KACC6B,EADD,KAEb,OACE,kBAAC,iBAAD,CAAgBN,OAAQA,GACtB,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACd,EAAA,EAAD,CAAKK,EAAG5D,GACN,kBAAC2D,EAAA,EAAD,sBACA,kBAACvD,EAAD,CAAWC,eAAgB8D,IACxB7B,EAAQ,kBAACD,EAAD,CAAsBC,MAAOA,IAAY,kCCT1CgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL4C,QAAQ5C,MAAMA,EAAM6C,c","file":"static/js/main.3af20b6a.chunk.js","sourcesContent":["export const defaultResponsiveMargin = { base: 2, sm: 3, lg: 5 };\n","import React from \"react\";\nimport { InputGroup, Input, FormControl } from \"@chakra-ui/core\";\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\n\ninterface SearchBarProps {\n  onQueryEntered: (query: string) => any;\n}\n\nexport function SearchBar({ onQueryEntered }: SearchBarProps) {\n  return (\n    <FormControl my={defaultResponsiveMargin}>\n      <InputGroup size=\"lg\">\n        <Input\n          type=\"text\"\n          placeholder=\"Search\"\n          onKeyDown={(event: React.KeyboardEvent<HTMLInputElement>) => {\n            if (event.key === \"Enter\") {\n              onQueryEntered(event.currentTarget.value);\n            }\n          }}\n        />\n      </InputGroup>\n    </FormControl>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Skeleton,\n  Image,\n  AspectRatioBox,\n  AspectRatioBoxProps,\n} from \"@chakra-ui/core\";\n\ninterface ElegantImageProps {\n  src: string;\n  alt: string;\n  fallBackSrc?: string;\n}\n\nexport default function ElegantImage({\n  src,\n  alt,\n  fallBackSrc,\n  ...props\n}: ElegantImageProps & AspectRatioBoxProps) {\n  const [isLoaded, setLoaded] = useState(false);\n  return (\n    <Skeleton isLoaded={isLoaded}>\n      <AspectRatioBox {...props} backgroundColor=\"gray.300\">\n        <Image\n          src={src}\n          alt={alt}\n          fallbackSrc={fallBackSrc}\n          objectFit=\"cover\"\n          opacity={isLoaded ? 1 : 0}\n          transition=\"opacity .3s\"\n          onLoad={() => {\n            setLoaded(true);\n          }}\n        />\n      </AspectRatioBox>\n    </Skeleton>\n  );\n}\n","import React from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Text, Spinner, SimpleGrid, Box, Heading } from \"@chakra-ui/core\";\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\nimport ElegantImage from \"./ElegantImage\";\n\nconst ARTISTS = gql`\n  query Artists($partialName: String!) {\n    queryArtists(byName: $partialName) {\n      id\n      name\n      image\n    }\n  }\n`;\n\ninterface ArtistQueryResult {\n  id: string;\n  name: string;\n  image: string;\n}\n\ninterface ArtistSearchOverviewProps {\n  query: string;\n}\n\nexport function ArtistSearchOverview({ query }: ArtistSearchOverviewProps) {\n  const { loading, error, data } = useQuery(ARTISTS, {\n    variables: { partialName: query },\n  });\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error) {\n    return <Text>Something went wrong. Please try again later.</Text>;\n  }\n\n  return (\n    <SimpleGrid\n      columns={{ base: 2, sm: 3, lg: 5 }}\n      spacing={defaultResponsiveMargin}\n    >\n      {data.queryArtists.map(({ id, name, image }: ArtistQueryResult) => (\n        <Box key={id} textAlign=\"center\">\n          <ElegantImage src={image} alt={name} ratio={1} maxW=\"400px\" />\n          <Heading size=\"sm\" m={defaultResponsiveMargin}>\n            {name}\n          </Heading>\n        </Box>\n      ))}\n    </SimpleGrid>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { ThemeProvider, Heading, CSSReset, Box } from \"@chakra-ui/core\";\nimport { SearchBar } from \"./components/SearchBar\";\nimport { ArtistSearchOverview } from \"./components/ArtistSearchOverview\";\nimport { defaultResponsiveMargin } from \"./DefaultTheme\";\n\nconst client = new ApolloClient({\n  uri: \"https://spotify-graphql-server.herokuapp.com/graphql?\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider>\n        <CSSReset />\n        <Box m={defaultResponsiveMargin}>\n          <Heading>DiscographiQL</Heading>\n          <SearchBar onQueryEntered={setQuery} />\n          {!!query ? <ArtistSearchOverview query={query} /> : <div />}\n        </Box>\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}