{"version":3,"sources":["DefaultTheme.tsx","components/SearchBar.tsx","components/ElegantImage.tsx","components/ArtistSearchOverview.tsx","components/pages/SearchPage.tsx","components/ArtistHeader.tsx","components/ArtistDiscography.tsx","components/pages/ArtistPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultResponsiveMargin","base","sm","lg","SearchBar","onQueryEntered","FormControl","my","InputGroup","size","Input","type","placeholder","onKeyDown","event","key","currentTarget","value","ElegantImage","src","alt","fallBackSrc","props","useState","isLoaded","setLoaded","Skeleton","AspectRatioBox","backgroundColor","Image","fallbackSrc","objectFit","opacity","transition","onLoad","ARTISTS","gql","ArtistSearchOverview","query","onArtistSelected","useQuery","variables","partialName","loading","error","data","Spinner","Text","queryArtists","length","SimpleGrid","columns","spacing","map","artist","Box","id","textAlign","onClick","image","name","ratio","maxW","Heading","m","SearchPage","showing","setQuery","d","undefined","ArtistHeader","w","overflow","pos","h","style","filter","Flex","alignItems","justify","top","color","ARTISTDISCOGRAPHY","ArtistDiscography","fullName","artistWithDiscography","find","possibleMatch","margin","albums","mx","ArtistPage","onNavigateBack","NavigateBackButton","zIndex","IconButton","aria-label","icon","variant","_hover","bg","_active","client","ApolloClient","uri","cache","InMemoryCache","App","setArtist","ThemeProvider","CSSReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.536c61f6.chunk.js","sourcesContent":["export const defaultResponsiveMargin = { base: 2, sm: 3, lg: 5 };\n","import React from \"react\";\nimport { InputGroup, Input, FormControl } from \"@chakra-ui/core\";\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\n\ninterface SearchBarProps {\n  onQueryEntered: (query: string) => any;\n}\n\nexport function SearchBar({ onQueryEntered }: SearchBarProps) {\n  return (\n    <FormControl my={defaultResponsiveMargin}>\n      <InputGroup size=\"lg\">\n        <Input\n          type=\"text\"\n          placeholder=\"Search\"\n          onKeyDown={(event: React.KeyboardEvent<HTMLInputElement>) => {\n            if (event.key === \"Enter\") {\n              onQueryEntered(event.currentTarget.value);\n            }\n          }}\n        />\n      </InputGroup>\n    </FormControl>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Skeleton,\n  Image,\n  AspectRatioBox,\n  AspectRatioBoxProps,\n} from \"@chakra-ui/core\";\n\ninterface ElegantImageProps {\n  src: string;\n  alt: string;\n  fallBackSrc?: string;\n}\n\nexport default function ElegantImage({\n  src,\n  alt,\n  fallBackSrc,\n  ...props\n}: ElegantImageProps & AspectRatioBoxProps) {\n  const [isLoaded, setLoaded] = useState(false);\n  return (\n    <Skeleton isLoaded={isLoaded}>\n      <AspectRatioBox {...props} backgroundColor=\"gray.300\">\n        <Image\n          src={src}\n          alt={alt}\n          fallbackSrc={fallBackSrc}\n          objectFit=\"cover\"\n          opacity={isLoaded ? 1 : 0}\n          transition=\"opacity .3s\"\n          onLoad={() => {\n            setLoaded(true);\n          }}\n        />\n      </AspectRatioBox>\n    </Skeleton>\n  );\n}\n","import React from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Text, Spinner, SimpleGrid, Box, Heading } from \"@chakra-ui/core\";\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\nimport ElegantImage from \"./ElegantImage\";\nimport { NamedNodeWithImage, Artist } from \"../DataModel\";\n\nconst ARTISTS = gql`\n  query Artists($partialName: String!) {\n    queryArtists(byName: $partialName) {\n      id\n      name\n      image\n    }\n  }\n`;\n\ninterface ArtistQueryResult {\n  queryArtists: NamedNodeWithImage[];\n}\n\ninterface ArtistSearchOverviewProps {\n  query: string;\n  onArtistSelected: (artist: Artist) => any;\n}\n\nexport function ArtistSearchOverview({\n  query,\n  onArtistSelected,\n}: ArtistSearchOverviewProps) {\n  const { loading, error, data } = useQuery<ArtistQueryResult>(ARTISTS, {\n    variables: { partialName: query },\n  });\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error) {\n    return <Text>Something went wrong. Please try again later.</Text>;\n  }\n\n  if (!data || data.queryArtists.length === 0) {\n    return <Text>No search results.</Text>;\n  }\n\n  return (\n    <SimpleGrid\n      columns={{ base: 2, sm: 3, lg: 5 }}\n      spacing={defaultResponsiveMargin}\n    >\n      {data.queryArtists.map((artist) => {\n        const artistClickHandler = () => {\n          onArtistSelected(artist);\n        };\n        return (\n          <Box key={artist.id} textAlign=\"center\" onClick={artistClickHandler}>\n            <ElegantImage\n              src={artist.image}\n              alt={artist.name}\n              ratio={1}\n              maxW=\"400px\"\n            />\n            <Heading size=\"sm\" m={defaultResponsiveMargin}>\n              {artist.name}\n            </Heading>\n          </Box>\n        );\n      })}\n    </SimpleGrid>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Box, Heading } from \"@chakra-ui/core\";\nimport { defaultResponsiveMargin } from \"../../DefaultTheme\";\nimport { SearchBar } from \"../SearchBar\";\nimport { ArtistSearchOverview } from \"../ArtistSearchOverview\";\nimport { Artist } from \"../../DataModel\";\n\ninterface SearchPageProps {\n  showing: boolean;\n  onArtistSelected: (artist: Artist | undefined) => any;\n}\n\nexport function SearchPage({ showing, onArtistSelected }: SearchPageProps) {\n  const [query, setQuery] = useState(\"\");\n  const handleQueryEntered = (query: string) => {\n    onArtistSelected(undefined);\n    setQuery(query);\n  };\n\n  return (\n    <Box d={showing ? \"block\" : \"none\"} m={defaultResponsiveMargin}>\n      <Heading>DiscographiQL</Heading>\n      <SearchBar onQueryEntered={handleQueryEntered} />\n      {!!query ? (\n        <ArtistSearchOverview\n          query={query}\n          onArtistSelected={onArtistSelected}\n        />\n      ) : (\n        <div />\n      )}\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Artist } from \"../DataModel\";\nimport { Box, Flex, Heading, Image } from \"@chakra-ui/core\";\n\ninterface ArtistHeaderProps {\n  artist: Artist;\n}\n\nexport default function ArtistHeader({ artist }: ArtistHeaderProps) {\n  return (\n    <Box w=\"100%\" overflow=\"hidden\" backgroundColor=\"#2e2e2e\" pos=\"relative\">\n      <Image\n        src={artist.image}\n        objectFit=\"cover\"\n        w=\"100%\"\n        h=\"30vh\"\n        opacity={0.2}\n        style={{ filter: \"blur(3px)\" }}\n      />\n      <Flex\n        pos=\"absolute\"\n        alignItems=\"center\"\n        justify=\"center\"\n        w=\"100%\"\n        h=\"100%\"\n        top={0}\n      >\n        <Heading size=\"2xl\" color=\"white\">\n          {artist.name}\n        </Heading>\n      </Flex>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { NamedNode, ArtistWithDiscography, Artist } from \"../DataModel\";\nimport { Spinner, Text, Box, SimpleGrid, Heading } from \"@chakra-ui/core\";\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\nimport ElegantImage from \"./ElegantImage\";\n\nconst ARTISTDISCOGRAPHY = gql`\n  query ArtistPage($fullName: String!) {\n    queryArtists(byName: $fullName) {\n      id\n      albums {\n        id\n        name\n        image\n      }\n    }\n  }\n`;\n\ninterface ArtistDiscographyQueryResults {\n  queryArtists: ArtistWithDiscography<NamedNode>[];\n}\n\ninterface ArtistDiscographyProps {\n  artist: Artist;\n}\n\nexport default function ArtistDiscography({ artist }: ArtistDiscographyProps) {\n  const { loading, error, data } = useQuery<ArtistDiscographyQueryResults>(\n    ARTISTDISCOGRAPHY,\n    {\n      variables: { fullName: artist.name },\n    }\n  );\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error) {\n    return (\n      <Text>\n        Something went wrong fetching this artist's discography. Please try again\n        later.\n      </Text>\n    );\n  }\n\n  if (data && data.queryArtists.length > 0) {\n    const artistWithDiscography = data.queryArtists.find((possibleMatch) => {\n      return possibleMatch.id === artist.id;\n    });\n\n    if (artistWithDiscography) {\n      return (\n        <SimpleGrid\n          columns={{ base: 2, sm: 3, lg: 5 }}\n          spacing={defaultResponsiveMargin}\n          margin={defaultResponsiveMargin}\n        >\n          {artistWithDiscography.albums.map(({ id, name, image }) => (\n            <Box key={id} textAlign=\"center\">\n              <ElegantImage src={image} alt={name} ratio={1} maxW=\"400px\" />\n              <Heading size=\"md\" mx={0} my={defaultResponsiveMargin}>\n                {name}\n              </Heading>\n            </Box>\n          ))}\n        </SimpleGrid>\n      );\n    }\n  }\n\n  return <Text>No search results.</Text>;\n}\n","import React from \"react\";\nimport { Box, IconButton } from \"@chakra-ui/core\";\nimport { Artist } from \"../../DataModel\";\nimport ArtistHeader from \"../ArtistHeader\";\nimport ArtistDiscography from \"../ArtistDiscography\";\n\ninterface ArtistPageProps {\n  artist: Artist;\n  onNavigateBack: () => void;\n}\n\nexport function ArtistPage({ artist, onNavigateBack }: ArtistPageProps) {\n  return (\n    <Box>\n      <NavigateBackButton onNavigateBack={onNavigateBack} />\n      <ArtistHeader artist={artist} />\n      <ArtistDiscography artist={artist} />\n    </Box>\n  );\n}\n\nfunction NavigateBackButton({\n  onNavigateBack,\n}: {\n  onNavigateBack: () => void;\n}) {\n  return (\n    <Box pos=\"absolute\" zIndex={1}>\n      <IconButton\n        aria-label=\"Back to search\"\n        icon=\"arrow-back\"\n        onClick={onNavigateBack}\n        variant=\"ghost\"\n        size=\"lg\"\n        color=\"white\"\n        _hover={{ bg: \"transparent\" }}\n        _active={{ bg: \"transparent\" }}\n      />\n    </Box>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\nimport { Artist } from \"./DataModel\";\nimport { SearchPage } from \"./components/pages/SearchPage\";\nimport { ArtistPage } from \"./components/pages/ArtistPage\";\n\nconst client = new ApolloClient({\n  uri: \"https://spotify-graphql-server.herokuapp.com/graphql?\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const [artist, setArtist] = useState<Artist | undefined>(undefined);\n  const handleArtistSelected = (artist: Artist | undefined) => {\n    setArtist(artist);\n  };\n\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider>\n        <CSSReset />\n        <SearchPage onArtistSelected={handleArtistSelected} showing={!artist} />\n        {artist && (\n          <ArtistPage\n            artist={artist}\n            onNavigateBack={() => {\n              setArtist(undefined);\n            }}\n          />\n        )}\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}