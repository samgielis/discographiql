{"version":3,"sources":["DefaultTheme.tsx","components/SearchBar.tsx","components/ElegantImage.tsx","components/AlbumTile.tsx","components/ArtistSearchOverview.tsx","components/PageHeader.tsx","components/SearchStateView.tsx","components/pages/SearchPage.tsx","components/LinkButton.tsx","components/ArtistHeader.tsx","FilterUtils.tsx","components/FilterToolBar.tsx","components/ArtistDiscography.tsx","components/pages/ArtistPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultResponsiveMargin","base","sm","lg","theme","colors","brand","accent","green","light","mediumlight","mediumdark","dark","opaquelight","opaquedark","SearchBar","onQueryEntered","FormControl","my","w","InputGroup","size","children","Icon","name","color","Input","type","placeholder","borderRadius","borderColor","bg","onKeyDown","event","key","currentTarget","value","ElegantImage","src","props","alt","useState","isLoaded","setLoaded","Skeleton","AspectRatioBox","backgroundColor","Image","objectFit","opacity","transition","onLoad","Tile","node","icon","onClick","maxW","iconColor","image","Box","textAlign","pos","cursor","ratio","IconOverlay","Heading","mx","PseudoBox","h","top","_hover","as","fontSize","margin","height","ARTISTS","gql","ArtistSearchOverview","query","onArtistSelected","onSearchStateChange","useQuery","variables","partialName","loading","error","data","queryArtists","length","SimpleGrid","columns","spacing","m","map","artist","Fragment","id","FaMicrophoneAlt","PageHeader","imageSrc","title","Stack","alignItems","justify","overflow","style","filter","zIndex","SearchStateView","searchState","content","FaArrowUp","Text","Spinner","FaSkullCrossbones","FaExclamationTriangle","SearchPlaceHolderWrapper","align","minH","SearchPage","showing","setQuery","setSearchState","d","SearcHeader","handleQueryEntered","undefined","LinkButton","React","forwardRef","ref","Button","Link","ArtistHeader","href","target","rel","FaSpotify","mr","DEFAULT_FILTER_CONFIG","sortDescending","filterDuplicates","uniqueNameReducer","set","currentValue","find","element","FilterToolBar","config","onFilterConfigChanged","toolStyleProps","ButtonGroup","ARTISTDISCOGRAPHY","ArtistDiscography","fullName","filterConfig","setFilterConfig","queryVisualization","artistWithDiscography","possibleMatch","filteredDiscography","nodes","configuration","descending","result","reduce","slice","sort","node1","node2","localeCompare","filterNodes","albums","album","window","open","ArtistPage","onNavigateBack","NavigateBackButton","IconButton","aria-label","variant","_active","client","ApolloClient","uri","cache","InMemoryCache","App","setArtist","ThemeProvider","DefaultTheme","CSSReset","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5aa73290.chunk.js","sourcesContent":["import { theme } from \"@chakra-ui/core\";\n\nexport const defaultResponsiveMargin = { base: 2, sm: 3, lg: 5 };\n\nexport default {\n  ...theme,\n  colors: {\n    brand: {\n      accent: theme.colors.green[400],\n      light: \"white\",\n      mediumlight: \"#eaeaea\",\n      mediumdark: \"#2e2e2e\",\n      dark: \"black\",\n      opaquelight: \"#e2e8f02e\",\n      opaquedark: \"#00000036\",\n    },\n    ...theme.colors,\n  },\n};\n","import React from \"react\";\nimport {\n  InputGroup,\n  Input,\n  FormControl,\n  InputLeftElement,\n  Icon,\n} from \"@chakra-ui/core\";\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\n\ninterface SearchBarProps {\n  onQueryEntered: (query: string) => any;\n}\n\nexport function SearchBar({ onQueryEntered }: SearchBarProps) {\n  return (\n    <FormControl my={defaultResponsiveMargin} w=\"60%\">\n      <InputGroup size=\"lg\">\n        <InputLeftElement children={<Icon name=\"search\" color=\"gray.300\" />} />\n        <Input\n          type=\"text\"\n          placeholder=\"Search\"\n          borderRadius={0}\n          borderColor=\"brand.opaquelight\"\n          color=\"brand.mediumlight\"\n          bg=\"brand.opaquedark\"\n          onKeyDown={(event: React.KeyboardEvent<HTMLInputElement>) => {\n            if (event.key === \"Enter\") {\n              onQueryEntered(event.currentTarget.value);\n            }\n          }}\n        />\n      </InputGroup>\n    </FormControl>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Skeleton,\n  Image,\n  AspectRatioBox,\n  AspectRatioBoxProps,\n} from \"@chakra-ui/core\";\n\ninterface ElegantImageProps {\n  src: string;\n  alt: string;\n}\n\nexport default function ElegantImage({\n  src,\n  alt,\n  ...props\n}: ElegantImageProps & AspectRatioBoxProps) {\n  const [isLoaded, setLoaded] = useState(!src);\n  return (\n    <Skeleton isLoaded={isLoaded}>\n      <AspectRatioBox {...props} backgroundColor=\"gray.300\">\n        <Image\n          src={src}\n          objectFit=\"cover\"\n          opacity={isLoaded ? 1 : 0}\n          transition=\"opacity .3s\"\n          onLoad={() => {\n            setLoaded(true);\n          }}\n        />\n      </AspectRatioBox>\n    </Skeleton>\n  );\n}\n","import React from \"react\";\nimport { NamedNodeWithImage } from \"../DataModel\";\nimport { Box, Heading, BoxProps, PseudoBox } from \"@chakra-ui/core\";\nimport ElegantImage from \"./ElegantImage\";\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\nimport { IconType } from \"react-icons/lib\";\n\ninterface TileProps extends BoxProps {\n  node: NamedNodeWithImage;\n  icon: IconType;\n  iconColor?: string;\n}\n\nexport function Tile({\n  node,\n  icon,\n  onClick,\n  maxW,\n  iconColor = \"brand.light\",\n}: TileProps) {\n  const { name, image } = node;\n  return (\n    <Box textAlign=\"center\" maxW={maxW}>\n      <Box pos=\"relative\" onClick={onClick} cursor=\"pointer\">\n        <ElegantImage src={image} alt={name} ratio={1} />\n        <IconOverlay icon={icon} color={iconColor} />\n      </Box>\n      <Heading size=\"md\" mx={0} my={defaultResponsiveMargin}>\n        {name}\n      </Heading>\n    </Box>\n  );\n}\n\ninterface LogoOverlayProps {\n  icon: IconType;\n  color: string;\n}\n\nfunction IconOverlay({ icon, color }: LogoOverlayProps) {\n  return (\n    <PseudoBox\n      w=\"100%\"\n      h=\"100%\"\n      pos=\"absolute\"\n      top={0}\n      bg=\"brand.dark\"\n      color={color}\n      opacity={0}\n      _hover={{ opacity: 0.8 }}\n      transition=\"opacity .3s\"\n    >\n      <Box as={icon} fontSize=\"4rem\" margin=\"auto\" height=\"100%\" />\n    </PseudoBox>\n  );\n}\n","import React from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { SimpleGrid } from \"@chakra-ui/core\";\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\nimport { NamedNodeWithImage, Artist, SearchState } from \"../DataModel\";\nimport { FaMicrophoneAlt } from \"react-icons/fa\";\nimport { Tile } from \"./AlbumTile\";\n\nconst ARTISTS = gql`\n  query Artists($partialName: String!) {\n    queryArtists(byName: $partialName) {\n      id\n      name\n      image\n    }\n  }\n`;\n\ninterface ArtistQueryResult {\n  queryArtists: NamedNodeWithImage[];\n}\n\ninterface ArtistSearchOverviewProps {\n  query: string;\n  onArtistSelected: (artist: Artist) => any;\n  onSearchStateChange: (state: SearchState) => any;\n}\n\nexport function ArtistSearchOverview({\n  query,\n  onArtistSelected,\n  onSearchStateChange,\n}: ArtistSearchOverviewProps) {\n  const { loading, error, data } = useQuery<ArtistQueryResult>(ARTISTS, {\n    variables: { partialName: query },\n  });\n\n  if (loading) {\n    onSearchStateChange(\"loading\");\n  } else if (error) {\n    onSearchStateChange(\"error\");\n  } else if (!data || data.queryArtists.length === 0) {\n    onSearchStateChange(\"no results\");\n  } else {\n    onSearchStateChange(\"completed\")\n    return (\n      <SimpleGrid\n        columns={{ base: 2, sm: 3, lg: 5 }}\n        spacing={defaultResponsiveMargin}\n        m={defaultResponsiveMargin}\n      >\n        {data.queryArtists.map((artist) => {\n          const artistClickHandler = () => {\n            onArtistSelected(artist);\n          };\n          return (\n            <React.Fragment key={artist.id}>\n              <Tile\n                node={artist}\n                maxW=\"400px\"\n                icon={FaMicrophoneAlt}\n                onClick={artistClickHandler}\n              />\n            </React.Fragment>\n          );\n        })}\n      </SimpleGrid>\n    );\n  }\n  return <div />;\n}\n","import React from \"react\";\nimport { Stack, Image, Heading } from \"@chakra-ui/core\";\n\ninterface PageHeaderProps {\n  imageSrc?: string;\n  title: string;\n  color?: string;\n}\n\nexport const PageHeader: React.FC<PageHeaderProps> = ({\n  imageSrc,\n  title,\n  children,\n  color = \"brand.light\",\n}) => (\n  <Stack\n    pos=\"relative\"\n    alignItems=\"center\"\n    justify=\"center\"\n    h=\"30vh\"\n    spacing={3}\n    overflow=\"hidden\"\n    backgroundColor=\"brand.mediumdark\"\n  >\n    <Image\n      src={imageSrc}\n      objectFit=\"cover\"\n      w=\"100%\"\n      opacity={0.2}\n      style={{ filter: \"blur(3px)\" }}\n      pos=\"absolute\"\n      zIndex={0}\n    />\n    <Heading as=\"h1\" size=\"2xl\" color={color} zIndex={1}>\n      {title}\n    </Heading>\n    <>{children}</>\n  </Stack>\n);\n","import React from \"react\";\nimport { Stack, Box, Text, Spinner } from \"@chakra-ui/core\";\nimport {\n  FaArrowUp,\n  FaExclamationTriangle,\n  FaSkullCrossbones,\n} from \"react-icons/fa\";\nimport { SearchState } from \"../DataModel\";\nimport \"./SearchStateView.css\";\n\ninterface SearchStateViewProps {\n  searchState: SearchState;\n}\n\nexport default function SearchStateView({ searchState }: SearchStateViewProps) {\n  if (searchState === \"completed\") {\n    return <div />;\n  }\n\n  let content = (\n    <>\n      <Box as={FaArrowUp} id=\"animated-arrow\" fontSize=\"5rem\"></Box>\n      <Text fontSize={{ base: \"xl\", lg: \"2xl\" }}>\n        There's nothing here yet.\n        <br /> <br /> Browse your favourite artists,\n        <br />\n        check their discography\n        <br />\n        and listen on Spotify.\n      </Text>\n    </>\n  );\n\n  if (searchState === \"loading\") {\n    content = <Spinner size=\"xl\" />;\n  } else if (searchState === \"error\") {\n    content = (\n      <>\n        <Box as={FaSkullCrossbones} fontSize=\"5rem\"></Box>\n        <Text fontSize={{ base: \"xl\", lg: \"2xl\" }}>\n          Something's wrong with your query.\n        </Text>\n      </>\n    );\n  } else if (searchState === \"no results\") {\n    content = (\n      <>\n        <Box as={FaExclamationTriangle} fontSize=\"5rem\"></Box>\n        <Text fontSize={{ base: \"xl\", lg: \"2xl\" }}>\n          We didn't find anything matching your search.\n        </Text>\n      </>\n    );\n  }\n  return <SearchPlaceHolderWrapper>{content}</SearchPlaceHolderWrapper>;\n}\n\nconst SearchPlaceHolderWrapper: React.FC<{}> = ({ children }) => (\n  <Stack\n    align=\"center\"\n    justify=\"center\"\n    objectFit=\"fill\"\n    m=\"auto\"\n    minH=\"70vh\"\n    color=\"brand.mediumdark\"\n    textAlign=\"center\"\n  >\n    {children}\n  </Stack>\n);\n","import React, { useState } from \"react\";\nimport { Box } from \"@chakra-ui/core\";\nimport { SearchBar } from \"../SearchBar\";\nimport { ArtistSearchOverview } from \"../ArtistSearchOverview\";\nimport { Artist, SearchState } from \"../../DataModel\";\nimport { PageHeader } from \"../PageHeader\";\nimport SearchStateView from \"../SearchStateView\";\n\ninterface SearchPageProps {\n  showing: boolean;\n  onArtistSelected: (artist: Artist | undefined) => any;\n}\n\nexport function SearchPage({ showing, onArtistSelected }: SearchPageProps) {\n  const [query, setQuery] = useState(\"\");\n  const [searchState, setSearchState] = useState<SearchState>(\"idle\");\n  const handleQueryEntered = (query: string) => {\n    if (!query) {\n      setSearchState(\"idle\");\n    }\n    onArtistSelected(undefined);\n    setQuery(query);\n  };\n\n  return (\n    <Box d={showing ? \"block\" : \"none\"}>\n      <SearcHeader handleQueryEntered={handleQueryEntered} />\n      {!!query && (\n        <ArtistSearchOverview\n          query={query}\n          onArtistSelected={onArtistSelected}\n          onSearchStateChange={setSearchState}\n        />\n      )}\n      <SearchStateView searchState={searchState} />\n    </Box>\n  );\n}\n\ninterface SearchHeaderProps {\n  handleQueryEntered: (query: string) => any;\n}\n\nfunction SearcHeader({ handleQueryEntered }: SearchHeaderProps) {\n  return (\n    <PageHeader title=\"DiscographiQL\" color=\"brand.accent\">\n      <SearchBar onQueryEntered={handleQueryEntered} />\n    </PageHeader>\n  );\n}\n","import React from \"react\";\nimport { ButtonProps, LinkProps, Button, Link } from \"@chakra-ui/core\";\n\ntype LinkButtonProps = ButtonProps & LinkProps;\n\nconst LinkButton: React.FC<LinkButtonProps> = React.forwardRef(\n  (props: LinkButtonProps, ref: React.Ref<any>) => {\n    return <Button size=\"md\" ref={ref} as={Link} {...props} />;\n  }\n);\n\nexport default LinkButton;\n","import React from \"react\";\nimport { Artist } from \"../DataModel\";\nimport { Box } from \"@chakra-ui/core\";\nimport { FaSpotify } from \"react-icons/fa\";\nimport LinkButton from \"./LinkButton\";\nimport { PageHeader } from \"./PageHeader\";\n\ninterface ArtistHeaderProps {\n  artist: Artist;\n}\n\nexport default function ArtistHeader({ artist }: ArtistHeaderProps) {\n  return (\n    <PageHeader imageSrc={artist.image} title={artist.name}>\n      <LinkButton\n        backgroundColor=\"brand.accent\"\n        href={`https://open.spotify.com/artist/${artist.id}`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <Box as={FaSpotify} mr=\".5em\" fontSize=\"1.2em\" />\n        Listen\n      </LinkButton>\n    </PageHeader>\n  );\n}\n","import { NamedNode } from \"./DataModel\";\n\nexport interface FilterConfiguration {\n  sortDescending: boolean;\n  filterDuplicates: boolean;\n}\n\nexport const DEFAULT_FILTER_CONFIG = {\n  sortDescending: false,\n  filterDuplicates: false,\n};\n\nfunction uniqueNameReducer<T extends NamedNode>(set: T[], currentValue: T) {\n  const hasEntryWithSameName = !!set.find((element) => {\n    return element.name === currentValue.name;\n  });\n\n  return hasEntryWithSameName ? set : [...set, currentValue];\n}\n\nfunction sortyByName<T extends NamedNode>(set: T[], descending: boolean): T[] {\n  return set.slice().sort((node1, node2) => {\n    if (!descending) {\n      return node1.name.localeCompare(node2.name);\n    } else {\n      return node2.name.localeCompare(node1.name);\n    }\n  });\n}\n\nexport function filterNodes<T extends NamedNode>(\n  nodes: T[],\n  configuration: FilterConfiguration\n): T[] {\n  let result = nodes;\n\n  if (configuration.filterDuplicates) {\n    result = nodes.reduce<T[]>(uniqueNameReducer, []);\n  }\n\n  result = sortyByName(result, configuration.sortDescending);\n\n  return result;\n}\n","import React from \"react\";\nimport { FilterConfiguration } from \"../FilterUtils\";\nimport { ButtonGroup, Button } from \"@chakra-ui/core\";\n\ninterface FilterToolbarProps {\n  config: FilterConfiguration;\n  onFilterConfigChanged: (config: FilterConfiguration) => any;\n}\n\nexport default function FilterToolBar({\n  config,\n  onFilterConfigChanged,\n}: FilterToolbarProps) {\n  const toolStyleProps = {\n    bg: \"brand.mediumdark\",\n    color: \"white\",\n    size: \"sm\" as \"sm\",\n    _hover: { color: \"brand.light\", bg: \"brand.dark\" },\n  };\n\n  return (\n    <ButtonGroup spacing={4}>\n      <Button\n        {...toolStyleProps}\n        onClick={() =>\n          onFilterConfigChanged({\n            sortDescending: !config.sortDescending,\n            filterDuplicates: config.filterDuplicates,\n          })\n        }\n      >\n        {config.sortDescending ? \"Sort ascending\" : \"Sort descending\"}\n      </Button>\n      <Button\n        {...toolStyleProps}\n        onClick={() =>\n          onFilterConfigChanged({\n            sortDescending: config.sortDescending,\n            filterDuplicates: !config.filterDuplicates,\n          })\n        }\n      >\n        {config.filterDuplicates\n          ? \"Show duplicate titles\"\n          : \"Hide duplicate titles\"}\n      </Button>\n    </ButtonGroup>\n  );\n}\n","import React, { useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { NamedNode, ArtistWithDiscography, Artist } from \"../DataModel\";\nimport { Spinner, Text, Box, SimpleGrid, Heading } from \"@chakra-ui/core\";\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\nimport {\n  DEFAULT_FILTER_CONFIG,\n  FilterConfiguration,\n  filterNodes,\n} from \"../FilterUtils\";\nimport FilterToolBar from \"./FilterToolBar\";\nimport { Tile } from \"./AlbumTile\";\nimport { FaSpotify } from \"react-icons/fa\";\n\nconst ARTISTDISCOGRAPHY = gql`\n  query ArtistPage($fullName: String!) {\n    queryArtists(byName: $fullName) {\n      id\n      albums {\n        id\n        name\n        image\n      }\n    }\n  }\n`;\n\ninterface ArtistDiscographyQueryResults {\n  queryArtists: ArtistWithDiscography<NamedNode>[];\n}\n\ninterface ArtistDiscographyProps {\n  artist: Artist;\n}\n\nexport default function ArtistDiscography({ artist }: ArtistDiscographyProps) {\n  const { loading, error, data } = useQuery<ArtistDiscographyQueryResults>(\n    ARTISTDISCOGRAPHY,\n    {\n      variables: { fullName: artist.name },\n    }\n  );\n\n  const [filterConfig, setFilterConfig] = useState<FilterConfiguration>(\n    DEFAULT_FILTER_CONFIG\n  );\n\n  let queryVisualization = <Text>No search results.</Text>;\n  if (loading) {\n    queryVisualization = <Spinner />;\n  } else if (error) {\n    queryVisualization = (\n      <Text>\n        Something went wrong fetching this artist's discography. Please try\n        again later.\n      </Text>\n    );\n  } else if (data && data.queryArtists.length > 0) {\n    /* It's not possible to query the server for an artist by id directly.\n      We need to query by name and then filter by id on the client side. */\n    const artistWithDiscography = data.queryArtists.find((possibleMatch) => {\n      return possibleMatch.id === artist.id;\n    });\n\n    if (artistWithDiscography) {\n      let filteredDiscography = filterNodes(\n        artistWithDiscography.albums,\n        filterConfig\n      );\n\n      queryVisualization = (\n        <SimpleGrid\n          columns={{ base: 2, sm: 3, lg: 5 }}\n          spacing={defaultResponsiveMargin}\n        >\n          {filteredDiscography.map((album) => (\n            <React.Fragment key={album.id}>\n              <Tile\n                node={album}\n                maxW=\"400px\"\n                icon={FaSpotify}\n                iconColor=\"brand.accent\"\n                onClick={() => {\n                  // TODO: Refactor this as soon as app is using ReactRouter properly\n                  window.open(`https://open.spotify.com/album/${album.id}`);\n                }}\n              />\n            </React.Fragment>\n          ))}\n        </SimpleGrid>\n      );\n    }\n  }\n\n  return (\n    <Box textAlign=\"center\" margin={defaultResponsiveMargin}>\n      <Box my={10}>\n        <Heading m={defaultResponsiveMargin}>Discography</Heading>\n        <FilterToolBar\n          config={filterConfig}\n          onFilterConfigChanged={setFilterConfig}\n        />\n      </Box>\n      {queryVisualization}\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Box, IconButton } from \"@chakra-ui/core\";\nimport { Artist } from \"../../DataModel\";\nimport ArtistHeader from \"../ArtistHeader\";\nimport ArtistDiscography from \"../ArtistDiscography\";\n\ninterface ArtistPageProps {\n  artist: Artist;\n  onNavigateBack: () => void;\n}\n\nexport function ArtistPage({ artist, onNavigateBack }: ArtistPageProps) {\n  return (\n    <Box>\n      <NavigateBackButton onNavigateBack={onNavigateBack} />\n      <ArtistHeader artist={artist} />\n      <ArtistDiscography artist={artist} />\n    </Box>\n  );\n}\n\nfunction NavigateBackButton({\n  onNavigateBack,\n}: {\n  onNavigateBack: () => void;\n}) {\n  return (\n    <Box pos=\"absolute\" zIndex={1}>\n      <IconButton\n        aria-label=\"Back to search\"\n        icon=\"arrow-back\"\n        onClick={onNavigateBack}\n        variant=\"ghost\"\n        size=\"lg\"\n        color=\"brand.light\"\n        _hover={{ bg: \"transparent\" }}\n        _active={{ bg: \"transparent\" }}\n      />\n    </Box>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { ThemeProvider, CSSReset, Box } from \"@chakra-ui/core\";\nimport { Artist } from \"./DataModel\";\nimport { SearchPage } from \"./components/pages/SearchPage\";\nimport { ArtistPage } from \"./components/pages/ArtistPage\";\nimport DefaultTheme from \"./DefaultTheme\";\n\nconst client = new ApolloClient({\n  uri: \"https://spotify-graphql-server.herokuapp.com/graphql?\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const [artist, setArtist] = useState<Artist | undefined>(undefined);\n  const handleArtistSelected = (artist: Artist | undefined) => {\n    setArtist(artist);\n  };\n\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider theme={DefaultTheme}>\n        <CSSReset />\n        <Box bg=\"brand.mediumlight\" minH=\"100vh\">\n          <SearchPage\n            onArtistSelected={handleArtistSelected}\n            showing={!artist}\n          />\n          {artist && (\n            <ArtistPage\n              artist={artist}\n              onNavigateBack={() => {\n                setArtist(undefined);\n              }}\n            />\n          )}\n        </Box>\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}