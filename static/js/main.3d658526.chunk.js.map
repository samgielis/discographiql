{"version":3,"sources":["DefaultTheme.tsx","components/SearchBar.tsx","components/ElegantImage.tsx","components/ArtistSearchOverview.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultResponsiveMargin","base","sm","lg","SearchBar","onQueryEntered","FormControl","my","InputGroup","size","Input","type","placeholder","onKeyDown","event","key","currentTarget","value","ElegantImage","src","alt","fallBackSrc","props","useState","isLoaded","setLoaded","Skeleton","AspectRatioBox","backgroundColor","Image","fallbackSrc","objectFit","opacity","transition","onLoad","ARTISTS","gql","ArtistSearchOverview","query","useQuery","variables","partialName","loading","error","data","Spinner","Text","SimpleGrid","columns","spacing","queryArtists","map","id","name","image","Box","textAlign","ratio","maxW","Heading","m","client","ApolloClient","uri","cache","InMemoryCache","App","setQuery","ThemeProvider","CSSReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uSAAaA,EAA0B,CAAEC,KAAM,EAAGC,GAAI,EAAGC,GAAI,GCQtD,SAASC,EAAT,GAAwD,IAAnCC,EAAkC,EAAlCA,eAC1B,OACE,kBAACC,EAAA,EAAD,CAAaC,GAAIP,GACf,kBAACQ,EAAA,EAAD,CAAYC,KAAK,MACf,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,SACZC,UAAW,SAACC,GACQ,UAAdA,EAAMC,KACRV,EAAeS,EAAME,cAAcC,Y,yECHlC,SAASC,EAAT,GAK8B,IAJ3CC,EAI0C,EAJ1CA,IACAC,EAG0C,EAH1CA,IACAC,EAE0C,EAF1CA,YACGC,EACuC,6CACZC,oBAAS,GADG,mBACnCC,EADmC,KACzBC,EADyB,KAE1C,OACE,kBAACC,EAAA,EAAD,CAAUF,SAAUA,GAClB,kBAACG,EAAA,EAAD,iBAAoBL,EAApB,CAA2BM,gBAAgB,aACzC,kBAACC,EAAA,EAAD,CACEV,IAAKA,EACLC,IAAKA,EACLU,YAAaT,EACbU,UAAU,QACVC,QAASR,EAAW,EAAI,EACxBS,WAAW,cACXC,OAAQ,WACNT,GAAU,Q,0MC1BtB,IAAMU,EAAUC,cAAH,KAoBN,SAASC,EAAT,GAAqE,IAArCC,EAAoC,EAApCA,MAAoC,EACxCC,mBAASJ,EAAS,CACjDK,UAAW,CAAEC,YAAaH,KADpBI,EADiE,EACjEA,QAASC,EADwD,EACxDA,MAAOC,EADiD,EACjDA,KAIxB,OAAIF,EACK,kBAACG,EAAA,EAAD,MAGLF,EACK,kBAACG,EAAA,EAAD,sDAIP,kBAACC,EAAA,EAAD,CACEC,QAAS,CAAE/C,KAAM,EAAGC,GAAI,EAAGC,GAAI,GAC/B8C,QAASjD,GAER4C,EAAKM,aAAaC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACrB,kBAACC,EAAA,EAAD,CAAKxC,IAAKqC,EAAII,UAAU,UACtB,kBAACtC,EAAD,CAAcC,IAAKmC,EAAOlC,IAAKiC,EAAMI,MAAO,EAAGC,KAAK,UACpD,kBAACC,EAAA,EAAD,CAASlD,KAAK,KAAKmD,EAAG5D,GACnBqD,QCzCb,IAAMQ,EAAS,IAAIC,eAAa,CAC9BC,IAAK,wDACLC,MAAO,IAAIC,kBAmBEC,MAhBf,WAAgB,IAAD,EACa3C,mBAAS,IADtB,mBACNe,EADM,KACC6B,EADD,KAEb,OACE,kBAAC,iBAAD,CAAgBN,OAAQA,GACtB,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACd,EAAA,EAAD,CAAKK,EAAG5D,GACN,kBAAC2D,EAAA,EAAD,sBACA,kBAACvD,EAAD,CAAWC,eAAgB8D,IACxB7B,EAAQ,kBAACD,EAAD,CAAsBC,MAAOA,IAAY,kCCT1CgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL4C,QAAQ5C,MAAMA,EAAM6C,c","file":"static/js/main.3d658526.chunk.js","sourcesContent":["export const defaultResponsiveMargin = { base: 2, sm: 3, lg: 5 };\r\n","import React from \"react\";\r\nimport { InputGroup, Input, FormControl } from \"@chakra-ui/core\";\r\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\r\n\r\ninterface SearchBarProps {\r\n  onQueryEntered: (query: string) => any;\r\n}\r\n\r\nexport function SearchBar({ onQueryEntered }: SearchBarProps) {\r\n  return (\r\n    <FormControl my={defaultResponsiveMargin}>\r\n      <InputGroup size=\"lg\">\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"Search\"\r\n          onKeyDown={(event: React.KeyboardEvent<HTMLInputElement>) => {\r\n            if (event.key === \"Enter\") {\r\n              onQueryEntered(event.currentTarget.value);\r\n            }\r\n          }}\r\n        />\r\n      </InputGroup>\r\n    </FormControl>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Skeleton,\r\n  Image,\r\n  AspectRatioBox,\r\n  AspectRatioBoxProps,\r\n} from \"@chakra-ui/core\";\r\n\r\ninterface ElegantImageProps {\r\n  src: string;\r\n  alt: string;\r\n  fallBackSrc?: string;\r\n}\r\n\r\nexport default function ElegantImage({\r\n  src,\r\n  alt,\r\n  fallBackSrc,\r\n  ...props\r\n}: ElegantImageProps & AspectRatioBoxProps) {\r\n  const [isLoaded, setLoaded] = useState(false);\r\n  return (\r\n    <Skeleton isLoaded={isLoaded}>\r\n      <AspectRatioBox {...props} backgroundColor=\"gray.300\">\r\n        <Image\r\n          src={src}\r\n          alt={alt}\r\n          fallbackSrc={fallBackSrc}\r\n          objectFit=\"cover\"\r\n          opacity={isLoaded ? 1 : 0}\r\n          transition=\"opacity .3s\"\r\n          onLoad={() => {\r\n            setLoaded(true);\r\n          }}\r\n        />\r\n      </AspectRatioBox>\r\n    </Skeleton>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { Text, Spinner, SimpleGrid, Box, Heading } from \"@chakra-ui/core\";\r\nimport { defaultResponsiveMargin } from \"../DefaultTheme\";\r\nimport ElegantImage from \"./ElegantImage\";\r\n\r\nconst ARTISTS = gql`\r\n  query Artists($partialName: String!) {\r\n    queryArtists(byName: $partialName) {\r\n      id\r\n      name\r\n      image\r\n    }\r\n  }\r\n`;\r\n\r\ninterface ArtistQueryResult {\r\n  id: string;\r\n  name: string;\r\n  image: string;\r\n}\r\n\r\ninterface ArtistSearchOverviewProps {\r\n  query: string;\r\n}\r\n\r\nexport function ArtistSearchOverview({ query }: ArtistSearchOverviewProps) {\r\n  const { loading, error, data } = useQuery(ARTISTS, {\r\n    variables: { partialName: query },\r\n  });\r\n\r\n  if (loading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  if (error) {\r\n    return <Text>Something went wrong. Please try again later.</Text>;\r\n  }\r\n\r\n  return (\r\n    <SimpleGrid\r\n      columns={{ base: 2, sm: 3, lg: 5 }}\r\n      spacing={defaultResponsiveMargin}\r\n    >\r\n      {data.queryArtists.map(({ id, name, image }: ArtistQueryResult) => (\r\n        <Box key={id} textAlign=\"center\">\r\n          <ElegantImage src={image} alt={name} ratio={1} maxW=\"400px\" />\r\n          <Heading size=\"sm\" m={defaultResponsiveMargin}>\r\n            {name}\r\n          </Heading>\r\n        </Box>\r\n      ))}\r\n    </SimpleGrid>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\r\nimport { ThemeProvider, Heading, CSSReset, Box } from \"@chakra-ui/core\";\r\nimport { SearchBar } from \"./components/SearchBar\";\r\nimport { ArtistSearchOverview } from \"./components/ArtistSearchOverview\";\r\nimport { defaultResponsiveMargin } from \"./DefaultTheme\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://spotify-graphql-server.herokuapp.com/graphql?\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  const [query, setQuery] = useState(\"\");\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <ThemeProvider>\r\n        <CSSReset />\r\n        <Box m={defaultResponsiveMargin}>\r\n          <Heading>DiscographiQL</Heading>\r\n          <SearchBar onQueryEntered={setQuery} />\r\n          {!!query ? <ArtistSearchOverview query={query} /> : <div />}\r\n        </Box>\r\n      </ThemeProvider>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}